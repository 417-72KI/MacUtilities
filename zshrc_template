# prompt
PROMPT='%F{6}%c%f $ '

# rbenv
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# aliases
alias ls='ls -G'
alias ll='ls -la'
alias relogin='exec /bin/zsh -l'
alias rmderived='/bin/rm -rf ~/Library/Developer/Xcode/DerivedData/*'
alias rmdsstore="find . -name '.DS_Store' -type f -ls -delete"
alias rmconflicted="find . -name '*.orig' -type f -ls -delete"

# git alias
alias gb='git branch'
alias gba='git branch -a'
alias gca='git commit --amend --no-edit'
alias gcp='git cherry-pick'
alias gra='git rebase --abort'
alias grc='git rebase --continue'
alias grs='git rebase --skip'
alias gf='git fetch -pP --all'
alias gp='git pull --rebase -p --all'
alias ghead='git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@''

alias merged_branch='git branch --merged | grep -v '"'"'*'"'"' | grep -v $(ghead)'
alias rmmerged_branch='merged_branch | xargs -I % git branch -d %'

# ghq alias
alias gbpeco='gb | grep -v "HEAD" | peco | tr -d '"'"' '"'"' | tr -d '"'"'*'"'"''
alias gbapeco='gba | grep -v "HEAD" | peco | tr -d '"'"' '"'"' | tr -d '"'"'*'"'"''

function gclone() {
    RESULT="$(ghq get -s $@ 2>&1)"
    CLONE="$(echo "${RESULT}" | grep 'clone' | grep '\->' | sed -E 's/(.*) -> (.*)/\2/g')"
    EXISTS="$(echo "${RESULT}"| grep 'exists' | sed -E 's/.*exists.* (\/.*)/\1/g')"
    if [[ "${EXISTS}" != '' ]]; then
        echo "open ${EXISTS}"
        code "${EXISTS}"
    elif [[ "${CLONE}" != '' ]]; then
        echo "open ${CLONE}"
        code "${CLONE}"
    fi
}

alias gclones='gclone --shallow'
alias gout='gf && git checkout $(gbapeco)'
alias glook='ghq get -s --look $(ghq list | peco)'
alias gcode='code $(ghq root)/$(ghq list | peco)'
alias gcp='git cherry-pick'
alias grb='SKIP_POST_CHECKOUT=1 gf && git rebase $(gbapeco)'
alias grm='SKIP_POST_CHECKOUT=1 gf && git rebase origin/$(ghead)'
alias grd='SKIP_POST_CHECKOUT=1 gf && git rebase origin/develop'
alias gs='git switch $(gbpeco)'
alias gsr='gf && git switch $(gba | grep -v "HEAD" | grep "origin" | sed 's@remotes/origin/@@' | peco)'
alias gmb='gf && git merge --no-ff $(gbapeco)'
alias gmm='gf && git merge --no-ff origin/$(ghead)'
alias gmd='gf && git merge --no-ff origin/develop'
alias ghr='git reset --hard'

# Docker alias
function drun() {
    local -A opthash
    zparseopts -D -A opthash -- -platform: -mount m -github g -environment: e: -image: i:

    OPTION='--rm'
    if [[ -n "${opthash[(i)--platform]}" ]]; then
        OPTION+=" --platform ${opthash[--platform]}"
    fi
    if [[ -n "${opthash[(i)--mount]}" ]] || [[ -n "${opthash[(i)-m]}" ]]; then
        OPTION+=' -v $PWD:/work -w /work'
    fi
    if [[ -n "${opthash[(i)--github]}" ]] || [[ -n "${opthash[(i)-g]}" ]]; then
        OPTION+=' -e GITHUB_TOKEN=$GITHUB_TOKEN'
    fi
    if [[ -n "${opthash[(i)--environment]}" ]]; then
        OPTION+=" -e ${opthash[--environment]}"
    fi
    if [[ -n "${opthash[(i)-e]}" ]]; then
        OPTION+=" -e ${opthash[-e]}"
    fi
    if [[ -n "${opthash[(i)--image]}" ]]; then
        IMAGE="${opthash[--image]}"
    elif [[ -n "${opthash[(i)-i]}" ]]; then
        IMAGE="${opthash[-i]}"
    else
        IMAGE="$(docker images --format "{{.Repository}}:{{.Tag}}" | peco)"
    fi

    # echo "docker run $(eval echo $OPTION) -it $IMAGE $@"
    docker run $(eval echo $OPTION) -it $IMAGE $@
}

# Other custom aliases or functions
alias readme='open $(find . -type d \( -name "Carthage" -o -name "Pods" -o -name "vendor" \) -prune -o -type f -name "README*" -print | peco)'
alias renovate-config-validator='drun --platform linux/amd64 -mg -e RENOVATE_TOKEN=$GITHUB_TOKEN -i renovate/renovate:slim renovate-config-validator'

alias coderc='code ~/.zshrc'
alias codeprofile='code ~/.zprofile'

function light() {
    if [ -z "$2" ]; then
        src="pbpaste"
    else
        src="cat $2"
    fi

    $src | highlight -O rtf --syntax $1 --font=Ricty --style=molokai --font-size 24 | pbcopy
}

function copy_current_branch() {
    git symbolic-ref --short HEAD | tr -d '\n' | pbcopy
}

function gbc() {
    if [ $# -ne 1 ]; then
        echo -e "\e[31mNo branch name specified.\e[m" 1>&2
        return
    fi
    gf && gb --no-track $1 origin/$(ghead)
    git switch $1
}

# Record iPhone simulator
function capsim() {
    TIMESTAMP=$(date '+%Y%m%d%H%M%S')
    xcrun simctl io booted recordVideo ~/Desktop/capture-$TIMESTAMP.mp4

    read yn\?"Convert to gif? (y/N): "
    case "$yn" in [yY]*) ;; *) echo "abort." ; return ;; esac

    ffmpeg -i ~/Desktop/capture-$TIMESTAMP.mp4 -r 24 ~/Desktop/capture-$TIMESTAMP.gif
}

